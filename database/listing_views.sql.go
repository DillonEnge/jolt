// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: listing_views.sql

package database

import (
	"context"
)

const listingViewsByID = `-- name: ListingViewsByID :one
SELECT l.views
FROM listing_views l
WHERE l.listing_id = $1::text
`

func (q *Queries) ListingViewsByID(ctx context.Context, listingID string) (int32, error) {
	row := q.db.QueryRow(ctx, listingViewsByID, listingID)
	var views int32
	err := row.Scan(&views)
	return views, err
}

const upsertListingViews = `-- name: UpsertListingViews :one
INSERT INTO listing_views(listing_id) VALUES(
    $1::text
)
ON CONFLICT(listing_id)
DO UPDATE SET
views = listing_views.views+1
RETURNING listing_id, views
`

func (q *Queries) UpsertListingViews(ctx context.Context, listingID string) (ListingView, error) {
	row := q.db.QueryRow(ctx, upsertListingViews, listingID)
	var i ListingView
	err := row.Scan(&i.ListingID, &i.Views)
	return i, err
}
